// Configuraci√≥n espec√≠fica para producci√≥n
export const isProduction = process.env.NODE_ENV === "production"
export const isDevelopment = process.env.NODE_ENV === "development"

// Configuraci√≥n de email para producci√≥n
export const productionEmailConfig = {
  // En producci√≥n, nunca simular a menos que se especifique
  forceSimulation: process.env.PROD_FORCE_EMAIL_SIMULATION === "true",

  // Logs m√≠nimos en producci√≥n
  verboseLogs: process.env.PROD_VERBOSE_LOGS === "true",

  // Sin delays artificiales en producci√≥n
  simulateDelay: false,

  // Sin prefijo en producci√≥n
  subjectPrefix: "",

  // Configuraci√≥n de reintentos
  maxRetries: 3,
  retryDelay: 1000,

  // Configuraci√≥n de timeouts
  timeout: 30000,

  // Configuraci√≥n de monitoreo
  enableMonitoring: true,
  logErrors: true,
}

// Funci√≥n para determinar si debemos simular emails en producci√≥n
export function shouldSimulateEmailsInProduction(): boolean {
  if (!isProduction) return false

  // Solo simular si est√° expl√≠citamente forzado
  if (productionEmailConfig.forceSimulation) return true

  // Si no hay configuraci√≥n de Resend, simular
  if (!process.env.RESEND_API_KEY) return true

  // Por defecto en producci√≥n, usar Resend real
  return false
}

// Funci√≥n para verificar si el dominio est√° verificado
export function isDomainVerified(): boolean {
  return process.env.RESEND_DOMAIN_VERIFIED === "true"
}

// Funci√≥n para obtener configuraci√≥n de producci√≥n
export function getProductionConfig() {
  return {
    ...productionEmailConfig,
    shouldSimulate: shouldSimulateEmailsInProduction(),
    environment: process.env.NODE_ENV,
    hasResendKey: !!process.env.RESEND_API_KEY,
    domainVerified: isDomainVerified(),
    resendTestMode: !isDomainVerified(),
  }
}

// Logs optimizados para producci√≥n
export function prodLog(message: string, data?: any) {
  if (isProduction && productionEmailConfig.verboseLogs) {
    console.log(`üöÄ [PROD] ${message}`, data ? data : "")
  }
}

export function prodError(message: string, error?: any) {
  if (isProduction && productionEmailConfig.logErrors) {
    console.error(`‚ùå [PROD] ${message}`, error ? error : "")

    // En producci√≥n, tambi√©n podr√≠as enviar errores a un servicio de monitoreo
    // como Sentry, LogRocket, etc.
    if (productionEmailConfig.enableMonitoring) {
      // Aqu√≠ podr√≠as integrar con tu servicio de monitoreo
      // Sentry.captureException(error)
    }
  }
}

export function prodSuccess(message: string, data?: any) {
  if (isProduction) {
    console.log(`‚úÖ [PROD] ${message}`, data ? data : "")
  }
}

// Funci√≥n para validar configuraci√≥n de producci√≥n
export function validateProductionConfig(): {
  isValid: boolean
  errors: string[]
  warnings: string[]
} {
  const errors: string[] = []
  const warnings: string[] = []

  // Validaciones cr√≠ticas
  if (!process.env.RESEND_API_KEY) {
    errors.push("RESEND_API_KEY no est√° configurado")
  }

  if (!isDomainVerified()) {
    warnings.push("RESEND_DOMAIN_VERIFIED no est√° configurado como 'true'")
  }

  if (!process.env.RESEND_TEST_EMAIL) {
    warnings.push("RESEND_TEST_EMAIL no est√° configurado para fallback")
  }

  // Validaciones de seguridad
  if (process.env.NODE_ENV !== "production") {
    warnings.push("NODE_ENV no est√° configurado como 'production'")
  }

  return {
    isValid: errors.length === 0,
    errors,
    warnings,
  }
}

// Funci√≥n para obtener m√©tricas de email
export function getEmailMetrics() {
  return {
    environment: process.env.NODE_ENV,
    resendConfigured: !!process.env.RESEND_API_KEY,
    domainVerified: isDomainVerified(),
    simulationForced: productionEmailConfig.forceSimulation,
    monitoringEnabled: productionEmailConfig.enableMonitoring,
    timestamp: new Date().toISOString(),
  }
}
