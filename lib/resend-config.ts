import {
  isDevelopment,
  isProduction,
  shouldSimulateEmails,
  devLog,
  devError,
  devSuccess,
  getDevelopmentConfig,
} from "./development-config"
import {
  shouldSimulateEmailsInProduction,
  isDomainVerified,
  prodLog,
  prodError,
  prodSuccess,
  getProductionConfig,
  validateProductionConfig,
} from "./production-config"

// Importar Resend solo si est√° disponible
let Resend: any = null
let resend: any = null

try {
  // Intentar importar Resend
  const ResendModule = require("resend")
  Resend = ResendModule.Resend

  // Inicializar solo si tenemos la API key
  if (process.env.RESEND_API_KEY && Resend) {
    resend = new Resend(process.env.RESEND_API_KEY)

    if (isDevelopment) {
      devLog("Resend SDK inicializado correctamente")
    } else {
      prodLog("Resend SDK inicializado para producci√≥n")
    }
  } else {
    if (isDevelopment) {
      devLog("Resend SDK no inicializado - falta API key")
    } else {
      prodError("Resend SDK no inicializado - falta API key en producci√≥n")
    }
  }
} catch (error) {
  if (isDevelopment) {
    devLog("Resend no est√° instalado, usando fetch directo o simulaci√≥n")
  } else {
    prodError("Resend no est√° instalado en producci√≥n", error)
  }
}

// Funci√≥n para validar el formato de la API key de Resend
export function isValidResendApiKeyFormat(): boolean {
  const apiKey = process.env.RESEND_API_KEY

  // Si no hay API key, no es v√°lida
  if (!apiKey) return false

  // Las API keys de Resend comienzan con "re_" y tienen al menos 24 caracteres
  return apiKey.startsWith("re_") && apiKey.length >= 24
}

// Funci√≥n para verificar si Resend est√° configurado
export function isResendConfigured(): boolean {
  return !!process.env.RESEND_API_KEY && isValidResendApiKeyFormat()
}

// Funci√≥n para verificar si la librer√≠a est√° instalada
export function isResendInstalled(): boolean {
  return !!Resend
}

// Funci√≥n para verificar si estamos en modo de prueba
export function isResendTestMode(): boolean {
  if (isProduction) {
    return !isDomainVerified()
  }
  return !process.env.RESEND_DOMAIN_VERIFIED || process.env.RESEND_DOMAIN_VERIFIED !== "true"
}

// Funci√≥n para obtener el email de prueba autorizado
export function getAuthorizedTestEmail(): string {
  return process.env.RESEND_TEST_EMAIL || "orion2000wcse@gmail.com"
}

// Funci√≥n para obtener el remitente correcto
export function getFromAddress(): string {
  return "Plan A <noreply@plana.website>"
}

// Funci√≥n para obtener configuraci√≥n actual
export function getCurrentConfig() {
  if (isDevelopment) {
    return getDevelopmentConfig()
  } else {
    return getProductionConfig()
  }
}

// Funci√≥n para simular env√≠o de email (desarrollo)
export async function simulateEmailSending({
  to,
  subject,
  html,
  text,
  from,
}: {
  to: string
  subject: string
  html: string
  text?: string
  from?: string
}) {
  const config = getCurrentConfig()
  const fromAddress = from || getFromAddress()

  if (isDevelopment) {
    devLog("üß™ SIMULANDO ENV√çO DE EMAIL EN DESARROLLO")
    devLog("üìß Para:", to)
    devLog("üìß Desde:", fromAddress)
    devLog("üìù Asunto:", subject)

    // Simular delay de red solo en desarrollo
    if (config.simulateDelay) {
      devLog("‚è≥ Simulando delay de red...")
      await new Promise((resolve) => setTimeout(resolve, 1000 + Math.random() * 2000))
    }

    devLog("üìÑ Contenido HTML (primeros 300 chars):", html.substring(0, 300) + "...")
    if (text) {
      devLog("üìÑ Contenido texto (primeros 200 chars):", text.substring(0, 200) + "...")
    }
  } else {
    prodLog("üß™ SIMULANDO ENV√çO DE EMAIL EN PRODUCCI√ìN")
    prodLog("üìß Para:", to)
    prodLog("üìß Desde:", fromAddress)
    prodLog("üìù Asunto:", subject)
  }

  // Simular ID de email
  const simulatedId = `sim_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`

  if (isDevelopment) {
    devSuccess("Email simulado exitosamente", {
      id: simulatedId,
      to,
      from: fromAddress,
      subject,
    })
  } else {
    prodSuccess("Email simulado en producci√≥n", {
      id: simulatedId,
      to,
      from: fromAddress,
    })
  }

  return {
    success: true,
    id: simulatedId,
    provider: isProduction ? "production-simulation" : "development-simulation",
    simulated: true,
    fromAddress,
    environment: process.env.NODE_ENV,
    reason: isProduction ? "Simulaci√≥n forzada en producci√≥n" : "Configurado para simular en desarrollo",
  }
}

// Funci√≥n para enviar email usando Resend SDK con reintentos
export async function sendEmailWithResendSDK({
  to,
  subject,
  html,
  text,
  from,
}: {
  to: string
  subject: string
  html: string
  text?: string
  from?: string
}) {
  const config = getCurrentConfig()
  const maxRetries = isProduction ? 3 : 1

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      if (!isResendConfigured()) {
        throw new Error("RESEND_API_KEY no est√° configurado")
      }

      if (!isResendInstalled() || !resend) {
        throw new Error("Resend SDK no est√° instalado")
      }

      // Usar el dominio personalizado
      const fromAddress = from || getFromAddress()

      // En desarrollo, agregar prefijo al asunto
      if (isDevelopment) {
        subject = `[DEV] ${subject}`
      }

      // En modo de prueba, enviar solo al email autorizado
      let finalTo = to
      let testMode = false

      if (isResendTestMode()) {
        const authorizedEmail = getAuthorizedTestEmail()
        if (to !== authorizedEmail) {
          if (isDevelopment) {
            devLog(`‚ö†Ô∏è Modo de prueba: Redirigiendo email de ${to} a ${authorizedEmail}`)
          } else {
            prodLog(`‚ö†Ô∏è Modo de prueba en producci√≥n: Redirigiendo email de ${to} a ${authorizedEmail}`)
          }

          finalTo = authorizedEmail
          testMode = true

          // Modificar el asunto para indicar el destinatario original
          subject = `[PRUEBA - Para: ${to}] ${subject}`

          // Agregar nota al HTML sobre el destinatario original
          const environmentNote = isProduction ? "Producci√≥n" : "Desarrollo"
          html = `
            <div style="background: #fef3c7; padding: 15px; margin-bottom: 20px; border-radius: 8px; border-left: 4px solid #f59e0b;">
              <h3 style="color: #92400e; margin: 0 0 10px 0;">üß™ Email de Prueba - ${environmentNote}</h3>
              <p style="color: #92400e; margin: 0;">
                <strong>Destinatario original:</strong> ${to}<br>
                <strong>Remitente:</strong> ${fromAddress}<br>
                <strong>Entorno:</strong> ${process.env.NODE_ENV}<br>
                <strong>Motivo:</strong> Dominio plana.website no verificado en Resend. Para enviar a cualquier email, verifica el dominio en resend.com/domains
              </p>
            </div>
            ${html}
          `
        }
      }

      if (isDevelopment) {
        devLog("üìß Enviando email con Resend SDK...")
        devLog("üë§ Para:", finalTo)
        devLog("üìß Desde:", fromAddress)
        devLog("üìù Asunto:", subject)
        devLog("üß™ Modo de prueba:", testMode)
        devLog("üîÑ Intento:", attempt)
      } else {
        prodLog("üìß Enviando email con Resend SDK...")
        prodLog("üë§ Para:", finalTo)
        prodLog("üîÑ Intento:", attempt)
      }

      const result = await resend.emails.send({
        from: fromAddress,
        to: [finalTo],
        subject,
        html,
        text,
      })

      if (isDevelopment) {
        devSuccess("Email enviado exitosamente con Resend SDK:", result.data?.id)
      } else {
        prodSuccess("Email enviado exitosamente con Resend SDK:", result.data?.id)
      }

      return {
        success: true,
        id: result.data?.id,
        provider: "resend-sdk",
        testMode,
        originalRecipient: testMode ? to : undefined,
        actualRecipient: finalTo,
        fromAddress,
        environment: process.env.NODE_ENV,
        attempts: attempt,
      }
    } catch (error) {
      if (isDevelopment) {
        devError(`Error en intento ${attempt} enviando email con Resend SDK:`, error)
      } else {
        prodError(`Error en intento ${attempt} enviando email con Resend SDK:`, error)
      }

      // Si es el √∫ltimo intento, devolver error
      if (attempt === maxRetries) {
        return {
          success: false,
          error: error instanceof Error ? error.message : "Error desconocido",
          provider: "resend-sdk",
          attempts: attempt,
        }
      }

      // Esperar antes del siguiente intento (solo en producci√≥n)
      if (isProduction && attempt < maxRetries) {
        await new Promise((resolve) => setTimeout(resolve, 1000 * attempt))
      }
    }
  }

  return {
    success: false,
    error: "M√°ximo n√∫mero de intentos alcanzado",
    provider: "resend-sdk",
    attempts: maxRetries,
  }
}

// Funci√≥n para enviar email usando fetch directo (fallback)
export async function sendEmailWithResendFetch({
  to,
  subject,
  html,
  text,
  from,
}: {
  to: string
  subject: string
  html: string
  text?: string
  from?: string
}) {
  try {
    if (!isResendConfigured()) {
      throw new Error("RESEND_API_KEY no est√° configurado")
    }

    // Usar el dominio personalizado
    const fromAddress = from || getFromAddress()

    // En desarrollo, agregar prefijo al asunto
    if (isDevelopment) {
      subject = `[DEV] ${subject}`
    }

    // En modo de prueba, enviar solo al email autorizado
    let finalTo = to
    let testMode = false

    if (isResendTestMode()) {
      const authorizedEmail = getAuthorizedTestEmail()
      if (to !== authorizedEmail) {
        if (isDevelopment) {
          devLog(`‚ö†Ô∏è Modo de prueba: Redirigiendo email de ${to} a ${authorizedEmail}`)
        } else {
          prodLog(`‚ö†Ô∏è Modo de prueba en producci√≥n: Redirigiendo email de ${to} a ${authorizedEmail}`)
        }

        finalTo = authorizedEmail
        testMode = true

        // Modificar el asunto para indicar el destinatario original
        subject = `[PRUEBA - Para: ${to}] ${subject}`

        // Agregar nota al HTML sobre el destinatario original
        const environmentNote = isProduction ? "Producci√≥n" : "Desarrollo"
        html = `
          <div style="background: #fef3c7; padding: 15px; margin-bottom: 20px; border-radius: 8px; border-left: 4px solid #f59e0b;">
            <h3 style="color: #92400e; margin: 0 0 10px 0;">üß™ Email de Prueba - ${environmentNote}</h3>
            <p style="color: #92400e; margin: 0;">
              <strong>Destinatario original:</strong> ${to}<br>
              <strong>Remitente:</strong> ${fromAddress}<br>
              <strong>Entorno:</strong> ${process.env.NODE_ENV}<br>
              <strong>Motivo:</strong> Dominio plana.website no verificado en Resend. Para enviar a cualquier email, verifica el dominio en resend.com/domains
            </p>
          </div>
          ${html}
        `
      }
    }

    if (isDevelopment) {
      devLog("üìß Enviando email con Resend API (fetch)...")
      devLog("üë§ Para:", finalTo)
      devLog("üìß Desde:", fromAddress)
      devLog("üß™ Modo de prueba:", testMode)
    } else {
      prodLog("üìß Enviando email con Resend API (fetch)...")
      prodLog("üë§ Para:", finalTo)
    }

    const response = await fetch("https://api.resend.com/emails", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${process.env.RESEND_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        from: fromAddress,
        to: [finalTo],
        subject,
        html,
        text,
      }),
    })

    if (!response.ok) {
      const errorData = await response.json()

      // Manejar diferentes tipos de errores comunes de Resend
      if (errorData.message) {
        // Error de dominio no verificado
        if (errorData.message.includes("verify a domain")) {
          if (isDevelopment) {
            devLog("‚ö†Ô∏è Error de dominio no verificado, usando simulaci√≥n...")
          } else {
            prodLog("‚ö†Ô∏è Error de dominio no verificado en producci√≥n, usando simulaci√≥n...")
          }

          return {
            success: true,
            provider: "simulation-fallback",
            simulated: true,
            reason: "Dominio plana.website no verificado en Resend",
            originalError: errorData.message,
            fromAddress,
            environment: process.env.NODE_ENV,
          }
        }

        // Error de API key inv√°lida
        if (errorData.message.includes("API key is invalid")) {
          if (isDevelopment) {
            devLog("‚ö†Ô∏è API key de Resend inv√°lida, usando simulaci√≥n...")
          } else {
            prodLog("‚ö†Ô∏è API key de Resend inv√°lida en producci√≥n, usando simulaci√≥n...")
          }

          return {
            success: true,
            provider: "simulation-fallback",
            simulated: true,
            reason: "API key de Resend inv√°lida o mal formateada",
            originalError: errorData.message,
            fromAddress,
            environment: process.env.NODE_ENV,
          }
        }
      }

      // Para cualquier otro error, usar simulaci√≥n como fallback
      if (isDevelopment) {
        devLog(`‚ö†Ô∏è Error de Resend API: ${errorData.message || response.statusText}, usando simulaci√≥n...`)
      } else {
        prodLog(
          `‚ö†Ô∏è Error de Resend API en producci√≥n: ${errorData.message || response.statusText}, usando simulaci√≥n...`,
        )
      }

      return {
        success: true,
        provider: "simulation-fallback",
        simulated: true,
        reason: `Error de Resend API: ${errorData.message || response.statusText}`,
        originalError: errorData.message || response.statusText,
        fromAddress,
        environment: process.env.NODE_ENV,
      }
    }

    const result = await response.json()

    if (isDevelopment) {
      devSuccess("Email enviado con Resend API:", result.id)
    } else {
      prodSuccess("Email enviado con Resend API:", result.id)
    }

    return {
      success: true,
      id: result.id,
      provider: "resend-fetch",
      testMode,
      originalRecipient: testMode ? to : undefined,
      actualRecipient: finalTo,
      fromAddress,
      environment: process.env.NODE_ENV,
    }
  } catch (error) {
    if (isDevelopment) {
      devError("Error con Resend API:", error)
    } else {
      prodError("Error con Resend API:", error)
    }

    // Si es un error de verificaci√≥n de dominio, usar simulaci√≥n
    if (error instanceof Error && error.message.includes("verify a domain")) {
      if (isDevelopment) {
        devLog("üîÑ Error de dominio, usando simulaci√≥n como fallback...")
      } else {
        prodLog("üîÑ Error de dominio en producci√≥n, usando simulaci√≥n como fallback...")
      }

      return {
        success: true,
        provider: "simulation-fallback",
        simulated: true,
        reason: "Dominio plana.website no verificado en Resend",
        originalError: error.message,
        fromAddress: from || getFromAddress(),
        environment: process.env.NODE_ENV,
      }
    }

    return {
      success: false,
      error: error instanceof Error ? error.message : "Error desconocido",
      provider: "resend-fetch",
    }
  }
}

// Funci√≥n principal que intenta m√∫ltiples m√©todos
export async function sendEmailWithResend({
  to,
  subject,
  html,
  text,
  from,
}: {
  to: string
  subject: string
  html: string
  text?: string
  from?: string
}) {
  const config = getCurrentConfig()

  if (isDevelopment) {
    devLog("üìß Iniciando env√≠o de email...")
    devLog("üîß Configuraci√≥n:", config)
    devLog("üìß Remitente:", from || getFromAddress())
  } else {
    prodLog("üìß Iniciando env√≠o de email en producci√≥n...")
    prodLog("üìß Remitente:", from || getFromAddress())
  }

  // Validar configuraci√≥n en producci√≥n
  if (isProduction) {
    const validation = validateProductionConfig()
    if (!validation.isValid) {
      prodError("Configuraci√≥n de producci√≥n inv√°lida:", validation.errors)
      return {
        success: false,
        error: "Configuraci√≥n de producci√≥n inv√°lida: " + validation.errors.join(", "),
        provider: "validation-error",
      }
    }

    if (validation.warnings.length > 0) {
      prodLog("Advertencias de configuraci√≥n:", validation.warnings)
    }
  }

  // En desarrollo, si est√° configurado para simular, usar simulaci√≥n
  if (isDevelopment && shouldSimulateEmails()) {
    devLog("üß™ Usando simulaci√≥n (configurado para desarrollo)")
    return await simulateEmailSending({ to, subject, html, text, from })
  }

  // En producci√≥n, si est√° configurado para simular, usar simulaci√≥n
  if (isProduction && shouldSimulateEmailsInProduction()) {
    prodLog("üß™ Usando simulaci√≥n (forzado en producci√≥n)")
    return await simulateEmailSending({ to, subject, html, text, from })
  }

  // M√©todo 1: Intentar con SDK si est√° instalado
  if (isResendInstalled()) {
    if (isDevelopment) {
      devLog("üîÑ Intentando con Resend SDK...")
    } else {
      prodLog("üîÑ Intentando con Resend SDK...")
    }

    const result = await sendEmailWithResendSDK({ to, subject, html, text, from })
    if (result.success) {
      return result
    }

    if (isDevelopment) {
      devLog("üîÑ SDK fall√≥, intentando con fetch...")
    } else {
      prodLog("üîÑ SDK fall√≥, intentando con fetch...")
    }
  }

  // M√©todo 2: Intentar con fetch directo
  if (isResendConfigured()) {
    if (isDevelopment) {
      devLog("üîÑ Intentando con Resend API...")
    } else {
      prodLog("üîÑ Intentando con Resend API...")
    }

    try {
      const result = await sendEmailWithResendFetch({ to, subject, html, text, from })
      if (result.success) {
        return result
      }
    } catch (error) {
      if (isDevelopment) {
        devError("‚ùå Error cr√≠tico con Resend API:", error)
        devLog("üîÑ Error capturado, usando simulaci√≥n como fallback...")
      } else {
        prodError("‚ùå Error cr√≠tico con Resend API en producci√≥n:", error)
        prodLog("üîÑ Error capturado, usando simulaci√≥n como fallback...")
      }
    }
  }

  // M√©todo 3: Simulaci√≥n (siempre funciona)
  if (isDevelopment) {
    devLog("üß™ Usando simulaci√≥n como fallback")
  } else {
    prodLog("üß™ Usando simulaci√≥n como fallback en producci√≥n")
  }

  return await simulateEmailSending({ to, subject, html, text, from })
}
